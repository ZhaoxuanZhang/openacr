// (C) 2017-2019 NYSE | Intercontinental Exchange
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
// Contacting ICE: <https://www.theice.com/contact>
//
// Target: atf_norm (exe) -- Run normalization tests (see normcheck table)
// Exceptions: yes
// Source: cpp/atf/norm/src.cpp -- source file (cpp/, include/) normalizations including amc
//
// Created By: alexei.lebedev
// Recent Changes: alexei.lebedev
//

#include "include/atf_norm.h"

// -----------------------------------------------------------------------------

// indent any source files modified in the last commit
void atf_norm::normcheck_indent_srcfile() {
    // indent recently modified source files
    SysCmd("for X in $(git diff-tree --name-only  HEAD -r --no-commit-id cpp include"
           " | egrep -v '(cpp/gen/|include/gen|extern/|include/vma)'); do if [ -f $X ]; then echo $X; fi; done "
           "> temp/atf_norm_indent.list",FailokQ(true));
    SysCmd("echo -n indenting files:;"
           " for X in $(head temp/atf_norm_indent.list); do"
           " echo -n ' ' $X; done; echo ...",FailokQ(false));
    SysCmd("bin/cpp-indent $(cat temp/atf_norm_indent.list) > temp/atf_norm_indent.log 2>&1",FailokQ(false));
    CheckCleanDirs("cpp include");
}

// -----------------------------------------------------------------------------

// indent all script files modified in the last commit
void atf_norm::normcheck_indent_script() {
    SysCmd("update-scriptfile");
    CheckCleanDirs(SsimFname(atf_norm::_db.cmdline.in, dmmeta_Ssimfile_ssimfile_dev_scriptfile));
    tempstr modfiles(SysEval("git diff-tree --name-only  HEAD -r --no-commit-id",FailokQ(true),1024*1024*10));
    ind_beg(Line_curs,line,modfiles) {
        if (atf_norm::FScriptfile *scriptfile = ind_scriptfile_Find(line)) {
            // indent script files -- there are few of them,
            // so it takes no time to indent them all.
            SysCmd(tempstr()<<"bin/cpp-indent "<<scriptfile->gitfile
                   <<" >> temp/atf_norm_indent.log 2>&1",FailokQ(false));
            CheckCleanDirs(scriptfile->gitfile);
        }
    }ind_end;
}

// -----------------------------------------------------------------------------

// update copyright info in source files
void atf_norm::normcheck_copyright() {
    command::src_hdr src_hdr;
    src_hdr.write=true;
    SysCmd(src_hdr_ToCmdline(src_hdr),FailokQ(false));
    CheckCleanDirs("cpp include");
}

// -----------------------------------------------------------------------------

// source code police
void atf_norm::normcheck_src_lim() {
    command::src_lim src_lim;
    src_lim.strayfile=true;
    src_lim.linelim=true;
    SysCmd(src_lim_ToCmdline(src_lim), FailokQ(false));
}

// -----------------------------------------------------------------------------

// run amc
void atf_norm::normcheck_amc() {
    command::amc amc;
    amc.report = false;
    SysCmd(amc_ToCmdline(amc),FailokQ(false));
    CheckCleanDirs("include/gen cpp/gen");
}

// -----------------------------------------------------------------------------

void atf_norm::normcheck_tempcode() {
    // extra double-quote needed to avoid this check
    // from failing on this file
    int rc=SysCmd("grep -RHn TEMP""CODE cpp include");
    if (rc==0) {// FOUND???
        prerr("SCALPEL LEFT IN PATIENT");
        prerr("It looks like some testing code made its way into the commit.");
        prerr("Please examine the found instances above carefully.");
        prerr("Diallowed code is indicated by the presence of the words TEMP""CODE.");
        algo_lib::_db.exit_code=1;
    }
}

// -----------------------------------------------------------------------------

static void GenCheck(strptr dir) {
    ind_beg(Dir_curs,file,DirFileJoin(dir,"*")) {
        int idx=FindStr(file.filename,"_gen.");
        if (idx!=-1) {
            atf_norm::FNs *ns=atf_norm::ind_ns_Find(ch_FirstN(file.filename,idx));
            if (!ns) {
                prlog("# success:N file doesn't appear to be generated by amc (to fix: pipe to  |grep ^acr_ed|sh)");
                prlog("acr_ed -del -srcfile:"<<file.pathname<<" -write");
                algo_lib::_db.exit_code=1;
            }
        }
    }ind_end;
}

void atf_norm::normcheck_stray_gen() {
    GenCheck("include/gen");
    GenCheck("cpp/gen");
}

// --------------------------------------------------------------------------------

// History of SKNF -> [History of SKNF](history-of-sknf)
static tempstr TocLink(strptr str) {
    tempstr ret;
    ret << "[" << str << "](#";
    tempstr lc;
    lc << str;
    MakeLower(lc);
    for (u32 i=0; i < lc.ch_n; i++) {
        if (!algo_lib::IdentCharQ(lc.ch_elems[i])) {
            lc.ch_elems[i] = '-';
        }
    }
    Replace(lc,"--","-");
    ret << lc << ")";
    return ret;
}

// Scan string FROM for markdown header indicators
// (==, ===, ==== etc)
// And add them as sections to the table of contents, with 3 spaces per level
static void AppendToc(strptr from, cstring &to) {
    ind_beg(Line_curs,line,from) {
        int i=0;
        while (i<line.n_elems && line[i]=='#') {
            i++;
        }
        if (i>1 && i<line.n_elems && line[i]==' ') {
            char_PrintNTimes(' ',to,(i-1)*3);
            to << "* " << TocLink(RestFrom(line,i+1)) << eol;
        }
    }ind_end;
}

void atf_norm::normcheck_readme() {
    // Create a README
    cstring text;
    cstring out;
    out << "This file was created with 'atf_norm readme' from txt/*.md -- *do not edit*\n\n";
    out << "## Table Of Contents\n";
    ind_beg(_db_readme_curs,readme,_db) {
        text << eol;
        text << FileToString(readme.gitfile);
    }ind_end;
    AppendToc(text,out);
    out << eol;
    out << text;
    StringToFile(out, "README.md");
}
